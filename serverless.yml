tenant: rpidanny
app: nietzsche
service: nietzsche

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters
  - serverless-plugin-include-dependencies
  - serverless-plugin-optimize

package:
  individually: true
  include:
    - src/assets/**/*
  exclude:
    - node_modules/**
    - README.md
    - LICENSE
    - package.json
    - package-lock.json
    - scripts/**
    - statemachine.png
    - resources/**

custom:
  optimize:
    includePaths: ['src/assets']

provider:
  name: aws
  runtime: nodejs12.x
  profile: default
  region: eu-west-1
  versionFunctions: false
  stage: dev
  tracing:
    lambda: true
    apiGateway: true
  stackTags:
    PROJECT: ${self:service}
    STAGE: ${opt:stage, self:provider.stage}
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}-quotes
    SNS_SCRAP_TOPIC: ${self:service}-${opt:stage, self:provider.stage}-scrap
    SQS_QUOTES: ${self:service}-${opt:stage, self:provider.stage}-quotes
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - sns:Publish
        - sns:Subscribe
      Resource: { "Fn::Join" : ["", ["arn:aws:sns:${self:provider.region}:", { "Ref" : "AWS::AccountId" }, ":${self:provider.environment.SNS_SCRAP_TOPIC}" ] ]  }
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:DeleteMessage
        - sqs:ReceiveMessage
        - sqs:GetQueueUrl
        - sqs:ListQueues
      Resource: { "Fn::Join" : ["", ["arn:aws:sqs:${self:provider.region}:", { "Ref" : "AWS::AccountId" }, ":${self:provider.environment.SQS_QUOTES}" ] ]  }

functions:
  - ${file(resources/functions/dispatchScrappers.yml)}
  - ${file(resources/functions/scrapQuotes.yml)}
  - ${file(resources/functions/saveQuotes.yml)}
  - ${file(resources/functions/tweetQuoteText.yml)}
  - ${file(resources/functions/tweetQuoteImage.yml)}
  - ${file(resources/functions/getQuotesByAuthor.yml)}
  - ${file(resources/functions/getRandomQuote.yml)}
  - ${file(resources/functions/incrementUsedCounter.yml)}
  - ${file(resources/functions/decideTweetMode.yml)}

resources:
  - ${file(resources/dynamodb.yml)}
  - ${file(resources/sns.yml)}
  - ${file(resources/sqs.yml)}  

stepFunctions:
  - ${file(resources/stepfunction.yml)}
